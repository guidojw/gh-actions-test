name: Publish Image

on:
  push:
    branches: [staging, master]
  workflow_call:
    inputs:
      sha:
        required: false
        type: string
  workflow_dispatch:

env:
  REGISTRY_URL: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  metadata:
    name: Metadata
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_metadata.outputs.tag }}
      build_args: ${{ steps.get_metadata.outputs.build_args }}
    steps:
      - name: Get metadata
        id: get_metadata
        run: |
          if [ $GITHUB_REF = 'refs/heads/master' ]; then
            echo '::set-output name=tag::latest'
          else
            echo '::set-output name=tag::'${GITHUB_REF#refs/heads/}
          fi

          if [ $GITHUB_REF = 'refs/heads/staging' ] || [ $GITHUB_REF = 'refs/heads/master' ]; then
            BUILD_ARGS='BUILD_HASH='$GITHUB_SHA
            if [ $GITHUB_REF = 'refs/heads/staging' ]; then
              BUILD_ARGS+=$'\nDEPLOY_TARGET=staging'
            fi
            BUILD_ARGS=${BUILD_ARGS//$'\n'/'%0A'}
            echo '::set-output name=build_args::'$BUILD_ARGS

            if [ $GITHUB_REF = 'refs/heads/master' ]; then
              echo '::set-output name=stage::production'
            else
              echo '::set-output name=stage::staging'
            fi
          fi

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: metadata
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        id: build_push_image
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          build-args: ${{ needs.metadata.outputs.build_args }}
          cache-from: type=gha,scope=main
          cache-to: type=gha,scope=main
          tags: |
            ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ needs.metadata.outputs.tag }}

#      - name: Get sourcemaps from image
#        if: |
#          github.event_name == 'push' || (github.event_name == 'workflow_dispatch' &&
#          github.workflow == 'Continuous Delivery')
#        env:
#          IMAGE_NAME: ${{ fromJSON(steps.build_push_image.outputs.metadata)['image.name'] }}
#        run: |
#          docker cp $(docker create $IMAGE_NAME):/usr/share/nginx/html/assets sourcemaps

      - name: Create Sentry release
        if: |
          github.event_name == 'push' || (github.event_name == 'workflow_dispatch' &&
          github.workflow == 'Continuous Delivery')
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: guidos-projects
          SENTRY_PROJECT: gh-actions-test
        with:
          environment: ${{ needs.metadata.outputs.stage }}
          finalize: false
#          sourcemaps: sourcemaps

  update_check_run:
    name: Update Check Run
    needs: [metadata, publish]
    if: github.event_name == 'workflow_dispatch' && github.workflow == 'Publish Image' && always()
    uses: guidojw/gh-actions-test/.github/workflows/update-check-run.yml@master
    with:
      results: ${{ join(needs.*.result, ' ') }}
    secrets:
      app_private_key: ${{ secrets.app_private_key }}

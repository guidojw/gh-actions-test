name: Continuous Delivery

on:
  workflow_dispatch:
    inputs:
      merge:
        description: Merge staging into master first? (y/N)
        required: false
        default: 'n'

concurrency:
  group: cd-${{ github.ref }}

env:
  APP_ID: 152323

jobs:
  branch_check:
    name: Branch Check
    runs-on: ubuntu-latest
    steps:
      - name: Validate branch
        run: |
          if [ $GITHUB_REF != 'refs/heads/staging' ] && [ $GITHUB_REF != 'refs/heads/master' ]; then
            echo 'This workflow can only be run on branches staging and master.'
            exit 1
          fi

  metadata:
    name: Metadata
    runs-on: ubuntu-latest
    needs: branch_check
    outputs:
      has_diff: ${{ steps.get_metadata.outputs.has_diff }}
      stage: ${{ steps.get_metadata.outputs.stage }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get metadata
        id: get_metadata
        run: |
          git fetch origin master
          git fetch origin staging
          if ! git diff origin/master origin/staging --exit-code; then
            echo '::set-output name=has_diff::true'
          else
            echo '::set-output name=has_diff::false'
          fi
          if [ $GITHUB_REF = 'refs/heads/master' ]; then
            echo '::set-output name=stage::production'
          else
            echo '::set-output name=stage::staging'
          fi

  merge:
    name: Merge
    runs-on: ubuntu-latest
    needs: metadata
    if: github.event.inputs.merge == 'y'
    outputs:
      sha: ${{ steps.get_sha.outputs.sha }}
    steps:
      - name: Validate inputs
        env:
          HAS_DIFF: ${{ fromJSON(needs.metadata.outputs.has_diff) }}
        run: |
          if [ $GITHUB_REF != 'refs/heads/master' ]; then
            echo 'Can only merge when the workflow target branch is master.'
            exit 1
          fi
          if ! $HAS_DIFF; then
            echo 'There is no diff so a merge is not necessary, skipping next steps.'
          fi

      - name: Checkout code
        if: fromJSON(needs.metadata.outputs.has_diff)
        uses: actions/checkout@v2

      - name: Run merge
        if: fromJSON(needs.metadata.outputs.has_diff)
        uses: devmasx/merge-branch@v1.4.0
        with:
          type: now
          from_branch: staging
          target_branch: master
          github_token: ${{ github.token }}

      - name: Get merge commit SHA
        id: get_sha
        if: fromJSON(needs.metadata.outputs.has_diff)
        run: |
          git fetch origin master
          echo '::set-output name=sha::'$(git rev-parse origin/master)

  publish:
    name: Publish
    needs: [metadata, merge]
    if: fromJSON(needs.metadata.outputs.has_diff)
    uses: guidojw/gh-actions-test/.github/workflows/publish-image.yml@master
    with:
      sha: ${{ needs.merge.outputs.sha }}

  # Above comment holds for Continuous Integration too.
  # TODO: Call Continuous Integration workflow

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [metadata, publish]
    if: |
      contains('refs/heads/staging refs/heads/master', github.ref) && (github.ref == 'refs/heads/master' &&
      github.event.inputs.merge == 'y' && fromJSON(needs.metadata.outputs.has_diff) && success() ||
      ((github.event.inputs.merge != 'y' || !fromJSON(needs.metadata.outputs.has_diff)) && !cancelled()))
    steps:
      - run: |
          sleep 30s

      - name: Start deployment
        uses: bobheadxi/deployments@v0.4.3
        id: start_deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ needs.metadata.outputs.stage }}

#      - name: Test SSH
#        uses: appleboy/ssh-action@v0.1.4
#        with:
#          host: guidojw.nl
#          username: github-actions
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          script: |
#            ls /opt/docker

      - name: Test Slack webhook
        env:
          STAGE: ${{ needs.metadata.outputs.stage }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -sSf \
            -X POST \
            -H 'Content-type: application/json' \
            -d '{"text": "Deploy for '${GITHUB_REPOSITORY#*/}' '$STAGE' is finished."}' \
            "$SLACK_WEBHOOK_URL"

      - name: Finish deployment
        uses: bobheadxi/deployments@v0.4.3
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.start_deployment.outputs.deployment_id }}
          env_url: https://www.google.com

  update_check_run:
    name: Update Check Run
    runs-on: ubuntu-latest
    needs: [branch_check, metadata, merge, publish, deploy]
    if: contains('refs/heads/staging refs/heads/master', github.ref) && always()
    steps:
      - name: Get conclusion
        id: get_conclusion
        env:
          RESULTS: ${{ join(needs.*.result, ' ') }}
        run: |
          for RESULT in $RESULTS; do
            if [ $RESULT = 'cancelled' ] || [ $RESULT = 'failure' ]; then
              echo '::set-output name=conclusion::'$RESULT
              exit
            fi
          done
          echo '::set-output name=conclusion::success'

      - name: Update Continuous Delivery Check Run
        uses: guidojw/actions/update-check-run@v1
        with:
          app_id: ${{ env.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
          sha: ${{ needs.merge.outputs.sha }}
          name: Continuous Delivery
          conclusion: ${{ steps.get_conclusion.outputs.conclusion }}
          details_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

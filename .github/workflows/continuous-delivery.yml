name: Continuous Delivery

on:
  workflow_dispatch:
    inputs:
      merge:
        description: Merge staging into master first? (y/N)
        required: false
        default: "n"

concurrency:
  group: cd-${{ github.ref }}

jobs:
  metadata:
    name: Metadata
    runs-on: ubuntu-latest
    outputs:
      has_diff: ${{ steps.check.outputs.has_diff }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check if branches master and staging differ
        id: check
        run: |
          git fetch origin master
          git fetch origin staging
          if [ -n "$(git diff origin/master origin/staging --exit-code)" ]; then
            echo '::set-output name=has_diff::true'
          else
            echo '::set-output name=has_diff::fa;se'
          fi

  merge:
    name: Merge
    runs-on: ubuntu-latest
    needs: metadata
    if: github.ref == 'refs/heads/master' && github.event.inputs.merge == 'y'
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run merge
        uses: devmasx/merge-branch@v1.4.0
        with:
          type: now
          from_branch: staging
          target_branch: master
          github_token: ${{ github.token }}

  # The merge commit from above step did not trigger the Publish Image workflow because of
  # https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#triggering-new-workflows-using-a-personal-access-token
  # so we have to call it ourselves.
  publish:
    name: Publish
    needs: merge
    uses: guidojw/amber-ui/.github/workflows/publish-image.yml@feat/github-actions-ci

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [metadata, publish]
    if: |
      contains('refs/heads/staging refs/heads/master', github.ref) &&
      ((github.ref == 'refs/heads/master' && github.event.inputs.merge == 'y' && success()) ||
      (github.event.inputs.merge != 'y' && always()))
    steps:
      - run: |
          echo ${{ needs.jobs.metadata.outputs.has_diff }}

      - run: echo 'deploy'
